generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  services Service[]
  bookings Booking[]
}

model Client {
  id        String   @id @default(cuid())
  phone     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
}

model Service {
  id                String   @id @default(cuid())
  name              String
  price             Float
  durationInMinutes Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  barber   User   @relation(fields: [barberId], references: [id])
  barberId String

  bookings Booking[]
}

model Booking {
  id        String   @id @default(cuid())
  startTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  barber   User   @relation(fields: [barberId], references: [id])
  barberId String

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
