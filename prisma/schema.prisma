generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String        @id @default(cuid())
  name                 String
  email                String?       @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  role                 Role?
  phone                String?
  connectionCode       String?       @unique
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  onboardingCompleted  Boolean       @default(false)
  trialEndsAt          DateTime?
  subscription         Subscription?
  passwordResetToken   String?       @unique
  passwordResetExpires DateTime?

  accounts     Account[]
  sessions     Session[]
  services     Service[]
  bookings     Booking[]
  workingHours WorkingHours[]
  timeBlocks   TimeBlock[]
  Notification Notification[]

  ownedBarbershop  Barbershop?        @relation("BarbershopOwner")
  teamMembership   Team?
  PushSubscription PushSubscription[]
}

model Barbershop {
  id           String  @id @default(cuid())
  name         String
  slug         String  @unique
  teamsEnabled Boolean @default(false)
  image        String?
  address      String?
  description  String?

  owner   User   @relation("BarbershopOwner", fields: [ownerId], references: [id])
  ownerId String @unique

  teamMembers Team[]

  services Service[]
  bookings Booking[]
  clients  Client[]
}

model Client {
  id        String   @id @default(cuid())
  phone     String   @unique
  name      String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]

  barbershop   Barbershop     @relation(fields: [barbershopId], references: [id])
  barbershopId String
  Notification Notification[]
}

model Service {
  id                String   @id @default(cuid())
  name              String
  price             Float
  durationInMinutes Int?
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  barber   User   @relation(fields: [barberId], references: [id])
  barberId String

  bookings Booking[]

  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String
}

model Booking {
  id                String        @id @default(cuid())
  startTime         DateTime
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  status            BookingStatus @default(SCHEDULED)
  priceAtBooking    Float?
  durationAtBooking Int?

  barber   User   @relation(fields: [barberId], references: [id])
  barberId String

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String

  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WorkingHours {
  id        String  @id @default(cuid())
  dayOfWeek Int
  startTime String?
  endTime   String?
  isWorking Boolean @default(true)

  barber   User   @relation(fields: [barberId], references: [id])
  barberId String

  blocks WorkScheduleBlock[]

  @@unique([barberId, dayOfWeek])
}

model TimeBlock {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  reason    String?

  barber   User   @relation(fields: [barberId], references: [id])
  barberId String
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String?

  @@index([userId])
}

enum BookingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum Role {
  OWNER
  BARBER
}

model Subscription {
  id                        String   @id @default(cuid())
  mercadopagoSubscriptionId String   @unique
  status                    String
  currentPeriodEnd          DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appliedDiscountCodeId String?
  discountedUntil       DateTime?
  discountCode          DiscountCode? @relation(fields: [appliedDiscountCodeId], references: [id])
}

model Team {
  id           String     @id @default(cuid())
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  barbershopId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([barbershopId])
}

enum WorkShiftType {
  MORNING
  AFTERNOON
  NIGHT
}

model WorkScheduleBlock {
  id        String        @id @default(cuid())
  type      WorkShiftType @default(MORNING)
  startTime String
  endTime   String

  workingHours   WorkingHours @relation(fields: [workingHoursId], references: [id], onDelete: Cascade)
  workingHoursId String

  @@unique([workingHoursId, type])
}

model DiscountCode {
  id             String   @id @default(cuid())
  code           String   @unique
  overridePrice  Int
  durationMonths Int
  validFrom      DateTime
  validUntil     DateTime
  maxUses        Int?
  timesUsed      Int      @default(0)
  createdAt      DateTime @default(now())

  subscriptions Subscription[]
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}
